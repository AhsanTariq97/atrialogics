import React from 'react'
import { useEffect } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import Navbar from '@/src/components/Navbar'
import Footer from '@/src/components/Footer'

import { getSlug, getArticleFromSlug } from "@/src/utils/mdx"
import ProjectPage from '@/src/components/ProjectPage'

import { Post } from '../portfolio'

interface Props {
  post: {
    frontmatter: Post;
    source: string;
  }
}

const Projects = ({ post }: Props) => {

    const source = post?.source;
    const frontmatter = post?.frontmatter;
    
    return (
    <>
        <Head>
            <title>Portfolio | {frontmatter.title}</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link href="https://fonts.googleapis.com/css2?family=Lexend+Giga:wght@200;300;400;500;600;700;800;900&display=swap"rel="stylesheet"/>
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className='overflow-x-hidden'>
            <header>
                <Navbar />
                <div className='py-[50px]'></div>
            </header>
            <main className='max-w-screen-xl mx-auto'>
                <div className='flex flex-col justify-between items-start px-8 pb-16 space-y-8 md:space-y-16 mx-auto max-w-2xl lg:max-w-full'>
                  <ProjectPage frontmatter={frontmatter} source={source} />
                  <Link href='/portfolio'>&larr; Back to Projects</Link>
                </div>
            </main>
            <footer className='w-full'>
                <Footer />
            </footer>
        </main>
    </>
  )
}

export default Projects


export async function getStaticPaths() {
    // getting all paths of each article as an array of
    // objects with their unique slugs
    const paths = (await getSlug()).map((slug) => ({ params: { slug } }))

    return {
      paths,
      // in situations where you try to access a path
      // that does not exist. it'll return a 404 page
      fallback: false,
    }
  }

  export async function getStaticProps({ params }: Params) {
    //fetch the particular file based on the slug
    const { slug } = params

    const { content, frontmatter } = await getArticleFromSlug(slug)
  
    return {
      props: {
        post: {
          source: content,
          frontmatter,
        },
      },
    }
  }

  interface Params {
    params: {
      slug: string;
    };
  }